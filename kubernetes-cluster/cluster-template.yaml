apiVersion: kops/v1alpha2
kind: Cluster
metadata:
  name: {{.kubernetes_cluster_name.value}}
spec:
  api:
    loadBalancer:
      class: Classic
      type: Public
      additionalSecurityGroups: ["{{.common_http_sg_id.value}}"]
  authorization:
    rbac: {}
  channel: stable
  cloudProvider: aws
  configBase: s3://{{.kops_s3_bucket.value}}/{{.kubernetes_cluster_name.value}}
  # Create one etcd member in the AZ where the master(s) is/are
  etcdClusters:
  - cpuRequest: 200m
    etcdMembers:
    - instanceGroup: master-{{.master_az.value}}
      name: {{.master_az.value | replace $.region.value "" }}
    memoryRequest: 100Mi
    name: main
  - cpuRequest: 100m
    etcdMembers:
    - instanceGroup: master-{{.master_az.value}}
      name: {{.master_az.value | replace $.region.value "" }}
    memoryRequest: 100Mi
    name: events
  iam:
    allowContainerRegistry: true
    legacy: false
  kubelet:
    anonymousAuth: false
  kubernetesApiAccess:
  - 0.0.0.0/0
  - ::/0
  kubernetesVersion: 1.23.8
  masterPublicName: api.{{.kubernetes_cluster_name.value}}
  networkCIDR: {{.vpc_cidr_block.value}}
  networkID: {{.vpc_id.value}}
  networking:
    kubenet: {}
  nonMasqueradeCIDR: 100.64.0.0/10
  sshAccess:
  - 0.0.0.0/0
  - ::/0
  subnets:
  # Public subnets, one per AZ
  {{range $i, $id := .public_subnet_ids.value}}
  - id: {{.}}
    name: subnet-{{index $.availability_zones.value $i}}
    type: Public
    zone: {{index $.availability_zones.value $i}}
  {{end}}
  topology:
    dns:
      type: Public
    masters: public
    nodes: public

{{ $count_masters := ($.num_masters.value | int) }}
{{- range until $count_masters }}
---
# Create masters in the preferred AZ
apiVersion: kops/v1alpha2
kind: InstanceGroup
metadata:
  labels:
    kops.k8s.io/cluster: {{$.kubernetes_cluster_name.value}}
  name: master{{.}}-{{$.master_az.value}}
spec:
  image: {{$.masters_image_id.value}}
  sshKeyName: {{$.ssh_key_name.value}}
  instanceMetadata:
    httpPutResponseHopLimit: 3
    httpTokens: required
  kubernetesVersion: 1.23.8
  machineType: {{$.masters_machine_type.value}}
  maxSize: {{$.masters_max_size.value}}
  minSize: {{$.masters_min_size.value}}
  nodeLabels:
    kops.k8s.io/instancegroup: master{{.}}-{{$.master_az.value}}
  rootVolumeSize: {{$.masters_volume_size.value}}
  role: Master
  subnets:
  - subnet-{{$.master_az.value}}
{{end}}

# Create num_nodes worker nodes for each subnet
{{ $count_nodes := ($.num_nodes.value | int) }} 
{{range $i, $id := .public_subnet_ids.value}}
{{- range until $count_nodes }}
---

apiVersion: kops/v1alpha2
kind: InstanceGroup
metadata:
  labels:
    kops.k8s.io/cluster: {{$.kubernetes_cluster_name.value}}
  name: node{{.}}-{{index $.availability_zones.value $i}}
spec:
  image: {{$.nodes_image_id.value}}
  sshKeyName: {{$.ssh_key_name.value}}
  instanceMetadata:
    httpPutResponseHopLimit: 1
    httpTokens: required
  kubernetesVersion: 1.23.8
  machineType: {{$.nodes_machine_type.value}}
  maxSize: {{$.nodes_max_size.value}}
  minSize: {{$.nodes_min_size.value}}
  nodeLabels:
    kops.k8s.io/instancegroup: node{{.}}-{{index $.availability_zones.value $i}}
  rootVolumeSize: {{$.nodes_volume_size.value}}
  role: Node
  additionalSecurityGroups:
    - {{$.security_group_rds_id.value}}
    - {{$.nodes_k8s_services.value}}
  subnets:
  - subnet-{{index $.availability_zones.value $i}}
{{end}}
{{end}}